name: Build the WASM plugin

on:
  workflow_call:
    inputs:
      debug_build:
        description: "Build in debug mode (without --release flag)"
        required: false
        type: boolean
        default: false
    outputs:
      name:
        description: "The name of the build artifact zip"
        value: ${{ jobs.build.outputs.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.zip.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1

      - uses: Swatinem/rust-cache@v2

      - name: Build WASM
        run: cargo build ${{ inputs.debug_build != true && '--release' || '' }} --target wasm32-wasip1

      - name: Install wasm-opt
        if: ${{ inputs.debug_build != true }}
        run: |
          LATEST=$(curl -s https://api.github.com/repos/WebAssembly/binaryen/releases/latest | grep -o '"tag_name": "[^"]*' | grep -o '[^"]*$')
          curl -L "https://github.com/WebAssembly/binaryen/releases/download/${LATEST}/binaryen-${LATEST}-x86_64-linux.tar.gz" | tar xz
          DIR="$PWD/binaryen-${LATEST}/bin"
          if [ -n "$GITHUB_PATH" ]; then
            echo "$DIR" >> "$GITHUB_PATH"
          else
            export PATH="$DIR:$PATH"
          fi

      - name: Optimize WASM
        if: ${{ inputs.debug_build != true }}
        run: |
          wasm-opt \
            -O2 --enable-simd --enable-bulk-memory-opt \
            -o target/wasm32-wasip1/release/optimized.wasm \
            target/wasm32-wasip1/release/maintenance-response.wasm
          mv target/wasm32-wasip1/release/optimized.wasm target/wasm32-wasip1/release/maintenance-response.wasm

      - name: Extract crate name and version
        id: crateinfo
        run: |
          CRATE_NAME=$(grep '^name' Cargo.toml | head -n1 | sed -E 's/name = "(.*)"/\1/')
          VERSION=$(grep '^version' Cargo.toml | head -n1 | sed -E 's/version = "(.*)"/\1/')
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create artifacts
        run: |
          mkdir release
          cp target/wasm32-wasip1/${{ inputs.debug_build != true && 'release' || 'debug' }}/maintenance-response.wasm release/plugin.wasm
          cp .traefik.yml release/

      - name: Create zip archive
        id: zip
        run: |
          cd release
          ZIP="${{ steps.crateinfo.outputs.crate_name }}-v${{ steps.crateinfo.outputs.version }}.zip"
          zip ../"$ZIP" plugin.wasm .traefik.yml
          echo "name=$ZIP" >> $GITHUB_OUTPUT

      - name: Upload build asset
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: ${{ steps.zip.outputs.name }}
